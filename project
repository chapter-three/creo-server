#!/bin/bash
#

# This is the remote control for scripts found in project/
# Modeled off of init.d


. /usr/local/scripts/common.sh
. /usr/local/scripts/shflags

set +e 

# main flags
DEFINE_string  'template' "$DEFAULT_TEMPLATE" 'template to use when creating a new project - only useable with the create command' 't'
DEFINE_string  'svn' ' none' '     external SVN url - only useable with the external command' 's'

FLAGS_HELP="USAGE: $0 [flags] command project
command can be one of:

project-related commands (root required):
create -t template:        creates a new project from template
backup:                    backup a project (aka archive)
restore:                   restore a project from backup (aka unarchive)
delete:                    deletes the project
create_solr:               creates a project solr instance
delete_solr:               deletes the project solr instance 
external -s svn:           creates a new project from an external SVN

other project-related commands (no root required):
local_all:                 dumps a copy of the project (svn, non-svn, files, db and private sandbox db) for local development
local_files:               dumps a copy of the project non-svn files
local_db:                  dumps a copy of the project db
local_private_db:          dumps a copy of the project private sandbox db
export:                    exports a project

sandbox-related commands (no root required) - all private db options assume that you've already created a sandbox:
sandbox:                   creates a project sandbox
copy_private_db:           copies the project database to a private sandbox database
create_private_db:         creates a new (blank) private sandbox database
update_private_db:         updates a private sandbox database from the project database
delete_private_db:         deletes a private sandbox database"

# parse the command-line
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

COMMAND=$1
PROJECT=$2
TEMPLATE=${FLAGS_template}
SVN=${FLAGS_svn}
DATESTAMP=`date +%Y%m%d%H%M%S`

# check for valid commands
if ! [ $# -eq 2 ]; then
    flags_help
    exit 1
fi

if [[ $1 != 'create' && \
    $1 != 'backup' && \
    $1 != 'restore' && \
    $1 != 'delete' && \
    $1 != 'create_solr' && \
    $1 != 'delete_solr' && \
    $1 != 'external' && \
    $1 != 'local_all' && \
    $1 != 'local_files' && \
    $1 != 'local_db' && \
    $1 != 'local_private_db' && \
    $1 != 'export' && \
    $1 != 'sandbox' && \
    $1 != 'copy_private_db' && \
    $1 != 'create_private_db' && \
    $1 != 'update_private_db' && \
    $1 != 'delete_private_db' ]] ; then
    flags_help
    exit 1
fi

# We want to make sure we are in a su shell, not sudo (so mysql can look in ~root/my.cnf
if [[ ( $1 = 'create' || $1 = 'backup' || $1 = 'restore' || $1 = 'external' || $1 = 'delete' || $1 = 'external' ) && $USER != "root" ]]; then
    echo "You'll want to use su for this."
    exit 1
fi

# Stop on any errors
set -e

for script in $( ls $SCRIPT_DIR/project.d/S* ) ; do
    sh $script $* $TEMPLATE $DATESTAMP $SVN
done

