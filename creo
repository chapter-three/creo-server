#!/bin/bash
# Stop on any errors
set -e

# Get the script's current working directory: http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
CWD="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Include color echo functions (echo_color, echo_status, echo_error)
source $CWD/include/colors

# Check if creo.conf exists
if [ ! -e $CWD/creo.conf ]; then
  set_message "Configuration cannot be found. Copy creo.conf.sample to creo.conf and adjust the values." error
  exit 1
fi

# Include creo.conf
source $CWD/creo.conf

# Allow errors for shflags
set +e
# Include shflags to parse flags
source $CWD/include/shflags

# Set shflags
DEFINE_string template "$DEFAULT_TEMPLATE" 'template to use when creating a new project - used with the create command' t

# Parse the command-line
FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# Stop on any errors again. shflags can exit with error: http://code.google.com/p/shflags/issues/detail?id=9
set -e

FLAGS_HELP="USAGE: creo [flags] command project

project-related commands (root required):
create -t template:        creates a new project from template
backup:                    backup a project (aka archive)
restore:                   restore a project from backup (aka unarchive)
delete:                    deletes the project
create_solr:               creates a project solr instance
delete_solr:               deletes the project solr instance

other project-related commands (no root required):
local_all:                 dumps a copy of the project (svn, non-svn, files, db and private sandbox db) for local development
local_files:               dumps a copy of the project non-svn files
local_db:                  dumps a copy of the project db
local_private_db:          dumps a copy of the project private sandbox db
export:                    exports a project

sandbox-related commands (no root required) - all private db options assume a sandbox exists:
sandbox:                   creates a project sandbox
copy_private_db:           copies the project database to a private sandbox database
create_private_db:         creates a new (blank) private sandbox database
update_private_db:         updates a private sandbox database from the project database
delete_private_db:         deletes a private sandbox database
"

# Make arguments and flags into useful variables
COMMAND=$1
PROJECT=$2
TEMPLATE=${FLAGS_template}
DATESTAMP=`date +%Y%m%d%H%M%S`

# Check for at least two arguments
if ! [ $# -eq 2 ]; then
  flags_help
  exit 1
fi

# Check for valid commands
if [[ $1 != 'create' && \
      $1 != 'backup' && \
      $1 != 'restore' && \
      $1 != 'delete' && \
      $1 != 'create_solr' && \
      $1 != 'delete_solr' && \
      $1 != 'external' && \
      $1 != 'local_all' && \
      $1 != 'local_files' && \
      $1 != 'local_db' && \
      $1 != 'local_private_db' && \
      $1 != 'export' && \
      $1 != 'sandbox' && \
      $1 != 'copy_private_db' && \
      $1 != 'create_private_db' && \
      $1 != 'update_private_db' && \
      $1 != 'delete_private_db' ]] ; then
  flags_help
  exit 1
fi

# If a command requires sudo, make sure we've are root.
if [[ ( $1 = 'create' || \
        $1 = 'backup' || \
        $1 = 'restore' || \
        $1 = 'external' || \
        $1 = 'delete' || \
        $1 = 'external' ) \
        && $USER != "root" ]] ; then
  set_message "The $1 command requires root. Use sudo." error
  exit 1
fi

# Run all script commands in ./scripts.d
for script in $( ls ./scripts.d/S* ) ; do
  source $script $* $TEMPLATE $DATESTAMP
done
